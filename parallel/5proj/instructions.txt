Project 5 - Due date: 11/17/2015 (Tuesday, 11:59pm PT) via OSBLE dropbox
Assignment type: Individual 

In this project you will implement a simple PI value estimator using the algorithm discussed in class. This algorithm essentially throws a dart n times into a unit square (1x1) and computes the fraction of times that dart falls into the embedded unit circle. This fraction multiplied by 4 gives an estimate for PI. 

Your code should expect two arguments: <n> <number of threads>.
Your code should output the PI value estimated at the end.  Note that the precision of the PI estimate could potentially vary with the number of threads (assuming n is fixed). 
Your code should also output the total time (calculated using omp_get_wtime function). 

-------------------------------------------------------------------------------

Pi Estimator

The idea is not to get speedup, but to get better precision. Can compare output to value online.

Say you have a circle, bound (edges touch) by a unit square (1x1). So the radius is 1/2

Area of circle = pi * r^2 = pi / 4
Area of square = (2r)^2 = 1

x hits in circle
n darts

  (x/n) = pi / 4
  4*(x/n) = pi

  For coding, have origin be bottom left corner of square.
  Generate 2 random numbers between 0 and 1, for x,y coords

  Use drand48_r() for generating random numbers.
  Refer to sumcomp.c example for how to get random numbers

-------------------------------------------------------------------------------

Experiment for different values of n (starting from 1024 and going all the way up to a billion or more) and p (1,2,4..).  

Please do two sets of experiments as discussed in class earlier, and report them as instructed below:

1) For speedup - keeping n fixed and increase p (1,2,4). You may have to do this for large values of n to observe meaningful speedup. Note that the glx nodes have only 4 cores per node. So there is no need to increase the number of threads beyond 4. In your report show the run-time table for this testing and also the speedup chart. 

2) For precision testing - keep n/p fixed, and increase p (1,2,.. up to 16 or 32). For this you will have to start with a good granularity (n/p) value which gave you some meaningful speedup from experiment set 1. The goal of this testing is to see if the PI value estimated by your code improves in precision with increase in n. Therefore, in your report make a table that shows the PI values estimated (up to some 20-odd decimal places) with each value of n tested. 
